name: Security Scan

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight

jobs:
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install bandit safety

      - name: Run Bandit
        run: |
          bandit -r . -x ./tests,./venv -f json -o bandit-results.json || true
          echo '{"runs":[{"tool":{"driver":{"name":"bandit","rules":[]}},"results":[]}]}' > bandit.sarif
          python -c '
import json
import sys

def convert_to_sarif(bandit_json):
    with open(bandit_json) as f:
        data = json.load(f)
    
    sarif = {
        "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
        "version": "2.1.0",
        "runs": [{
            "tool": {
                "driver": {
                    "name": "Bandit",
                    "informationUri": "https://github.com/PyCQA/bandit",
                    "rules": []
                }
            },
            "results": []
        }]
    }
    
    if "results" in data:
        for result in data["results"]:
            sarif_result = {
                "ruleId": f"B{result.get("test_id")}",
                "level": "error" if result.get("issue_severity") == "HIGH" else "warning",
                "message": {
                    "text": result.get("issue_text", "")
                },
                "locations": [{
                    "physicalLocation": {
                        "artifactLocation": {
                            "uri": result.get("filename", "").replace("./", "")
                        },
                        "region": {
                            "startLine": result.get("line_number", 1)
                        }
                    }
                }]
            }
            sarif["runs"][0]["results"].append(sarif_result)
    
    return sarif

with open("bandit-results.json") as f:
    try:
        data = json.load(f)
        sarif = convert_to_sarif("bandit-results.json")
        with open("bandit.sarif", "w") as sf:
            json.dump(sarif, sf, indent=2)
    except:
        pass  # Keep the empty SARIF file if conversion fails
          '

      - name: Upload Security Results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: bandit.sarif

  dependency-review:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: read
    steps:
      - uses: actions/checkout@v4
        with:
          base-ref: ${{ github.event.pull_request.base.ref }}
          head-ref: ${{ github.event.pull_request.head.ref }}
      
      - name: Dependency Review
        uses: actions/dependency-review-action@v3

  codeql-analysis:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - uses: actions/checkout@v4
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
          
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:python"
